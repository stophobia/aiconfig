"use strict";(self.webpackChunkaiconfig_docs=self.webpackChunkaiconfig_docs||[]).push([[13],{8278:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var r=n(5893),i=n(1151);n(4866),n(5162);const s={sidebar_position:1},a="AIConfig Specification",o={id:"overview/ai-config-format",title:"AIConfig Specification",description:"Introduction",source:"@site/docs/overview/ai-config-format.md",sourceDirName:"overview",slug:"/overview/ai-config-format",permalink:"/docs/overview/ai-config-format",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docSidebar",previous:{title:"Overview",permalink:"/docs/category/overview"},next:{title:"Create an AIConfig",permalink:"/docs/overview/create-an-aiconfig"}},l={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Top-level structure",id:"top-level-structure",level:2},{value:"Example <code>aiconfig</code>",id:"example-aiconfig",level:3},{value:"Prompts",id:"prompts",level:2},{value:"Prompt input",id:"prompt-input",level:3},{value:"Prompt outputs",id:"prompt-outputs",level:3},{value:"<code>execute_result</code>",id:"execute_result",level:4},{value:"<code>error</code>",id:"error",level:4},{value:"Example prompt output",id:"example-prompt-output",level:4},{value:"Metadata",id:"metadata",level:2},{value:"Root metadata",id:"root-metadata",level:3},{value:"Prompt metadata",id:"prompt-metadata",level:3},{value:"Output metadata",id:"output-metadata",level:3}];function c(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.a)(),...e.components},{Details:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"aiconfig-specification",children:"AIConfig Specification"}),"\n",(0,r.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"aiconfig"})," files are source-control friendly JSON documents that contain generative AI model settings, prompt inputs and outputs, and flexible multi-purpose metadata."]}),"\n",(0,r.jsxs)(t.p,{children:["In short, ",(0,r.jsx)(t.code,{children:"aiconfig"})," defines the ",(0,r.jsx)(t.em,{children:"signature"})," of generative AI model behavior:"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"prompts"})," and prompt chains that constitute the input"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"model"})," to run inference"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"model parameters"})," to tune the model behavior"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"outputs"})," cached from previous inference runs, which can be serialized optionally."]}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"aiconfig"})," file format is meant to be extremely flexible, and can be used for a wide variety of use-cases. Specifically:"]}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["AIConfig is ",(0,r.jsx)(t.strong,{children:"multi-modal"}),". Prompt inputs and outputs can specify MIME types and reference a file or binary output. This allows ",(0,r.jsx)(t.code,{children:"aiconfig"})," to be used with models of any modality (text-to-speech, image+text-to-text, audio-to-text, etc.)"]}),"\n",(0,r.jsxs)(t.li,{children:["AIConfig is ",(0,r.jsx)(t.strong,{children:"model-agnostic"}),". As long as the data is serialized in the AIConfig format, it can be deserialized by any model-specific parser to perform inference. Custom extensions can be defined for hyper-local use-cases."]}),"\n"]}),"\n",(0,r.jsx)(t.admonition,{type:"tip",children:(0,r.jsxs)(t.p,{children:["The full AIConfig schema can be found ",(0,r.jsx)(t.strong,{children:(0,r.jsx)(t.a,{href:"https://github.com/lastmile-ai/aiconfig/blob/main/schema/aiconfig.schema.json",children:"here"})}),". The corresponding ",(0,r.jsx)(t.a,{href:"https://github.com/lastmile-ai/aiconfig/blob/main/typescript/types.ts#L6",children:"TypeScript types"})," make it easy to reason about it."]})}),"\n",(0,r.jsx)(t.h2,{id:"top-level-structure",children:"Top-level structure"}),"\n",(0,r.jsxs)(t.p,{children:["At the highest level, ",(0,r.jsx)(t.code,{children:"aiconfig"})," has the following properties:"]}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{}),(0,r.jsx)(t.th,{})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.code,{children:"name"}),(0,r.jsx)("div",{className:"label basic required",children:"Required"})]}),(0,r.jsx)(t.td,{children:"Friendly name descriptor for the AIConfig. Could default to the filename if not specified."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"description"})}),(0,r.jsx)(t.td,{children:"Description of the AIConfig. If you have a collection of different AIConfigs, this can be used for dynamic prompt routing."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.code,{children:"schema_version"}),(0,r.jsx)("div",{className:"label basic required",children:"Required"})]}),(0,r.jsxs)(t.td,{children:["The version of the AIConfig schema (e.g. ",(0,r.jsx)(t.code,{children:"latest"}),")."]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"metadata"})}),(0,r.jsx)(t.td,{children:"Root-level metadata that applies to the entire AIConfig, containing things like model settings and global parameters."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"prompts"})}),(0,r.jsx)(t.td,{children:"Array of prompts that make up the AIConfig."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.em,{children:"extra user-defined properties"})}),(0,r.jsx)(t.td,{children:"Additional properties can be specified that may be used for specific use-cases."})]})]})]}),"\n",(0,r.jsxs)(t.h3,{id:"example-aiconfig",children:["Example ",(0,r.jsx)(t.code,{children:"aiconfig"})]}),"\n",(0,r.jsxs)(n,{open:!0,children:[(0,r.jsxs)("summary",{children:[(0,r.jsx)(t.code,{children:"sql.aiconfig.json"})," example"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-json",children:'{\n  "name": "gpt4 as your data engineer",\n  "description": "A SQL coding assistant that generates SQL queries for the desired output.",\n  "schema_version": "latest",\n  "metadata": {\n    "models": {\n      "gpt-4": {\n        "model": "gpt-4",\n        "top_p": 1,\n        "max_tokens": 3000,\n        "temperature": 1,\n        "system_prompt": "You are an expert at SQL..."\n      }\n    }\n  },\n  "prompts": [\n    {\n      "name": "write_sql",\n      "input": "Write me a {{sql_language}} query to get this final output: {{output_data}}. Use the tables relationships defined here: {{table_relationships}}.",\n      "metadata": {\n        "model": "gpt-4",\n        "parameters": {\n          "sql_language": "mysql",\n          "output_data": "This is a parameter that follows the handlebars syntax. It allows you to create templatized prompts, and override them with values when an aiconfig is run in code",\n          "table_relationships": "For example, you could invoke config.run(\'write_sql\', table_relationships=get_table_schema(my_table)) to dynamically specify table relationships"\n        }\n      }\n    },\n    {\n      "name": "postgresql",\n      "input": "Translate the following into PostgreSQL code:\\n {{write_sql.output}}",\n      "metadata": {\n        "model": {\n          "name": "gpt-4",\n          "settings": {\n            "model": "gpt-4",\n            "max_tokens": 3000, // Override prompt-specific model parameters here.\n            "temperature": 0.75 // They will get merged with the GPT-4 settings specified in root metadata.\n          }\n        }\n      },\n      "outputs": [\n        /* Output(s) for this prompt, if any. See below for details */\n      ]\n    }\n  ]\n}\n'})})]}),"\n",(0,r.jsx)(t.h2,{id:"prompts",children:"Prompts"}),"\n",(0,r.jsxs)(t.p,{children:["Prompts are the primary building block of ",(0,r.jsx)(t.code,{children:"aiconfig"}),". They store the inputs (and optionally the outputs) for a model, as well as any prompt-specific metadata.\nAll prompts have the following basic structure:"]}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{}),(0,r.jsx)(t.th,{})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.code,{children:"name"}),(0,r.jsx)("div",{className:"label basic required",children:"Required"})]}),(0,r.jsx)(t.td,{children:"A unique identifier for the prompt. This is used to reference the prompt in other parts of the AIConfig, and when using the SDK."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.code,{children:"input"}),(0,r.jsx)("div",{className:"label basic required",children:"Required"})]}),(0,r.jsxs)(t.td,{children:["The input prompt - this can be a ",(0,r.jsx)(t.code,{children:"string"}),", or a complex object that represents one or more inputs (e.g. image URI and string prompt)."]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"metadata"})}),(0,r.jsx)(t.td,{children:"Prompt-specific metadata that applies to this prompt, containing things like model settings and prompt parameters. This gets merged with the root metadata, and takes precedence for overridden properties."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"outputs"})}),(0,r.jsx)(t.td,{children:"Optional array of outputs representing a previous inference run for this prompt."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.em,{children:"extra user-defined properties"})}),(0,r.jsx)(t.td,{children:"Additional properties can be specified that may be used for specific use-cases."})]})]})]}),"\n",(0,r.jsx)(t.h3,{id:"prompt-input",children:"Prompt input"}),"\n",(0,r.jsxs)(t.p,{children:["The input to a model can be a string (e.g. for an LLM), or a more complex prompt for multi-modal models (e.g. audio file, or a combination of different artifacts as a single input). The ",(0,r.jsx)(t.code,{children:"input"})," field makes it possible to specify any kind of model input."]}),"\n",(0,r.jsx)(t.p,{children:"It is typed as a union type:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"type PromptInput =\n  | {\n      /**\n       * Input to the model. This can represent a single input, or multiple inputs.\n       * The structure of the data object is up to the ModelParser. For example,\n       * a multi-modal ModelParser can choose to key the data by MIME type.\n       */\n      data?: JSONValue;\n\n      [k: string]: any;\n    }\n  | string;\n"})}),"\n",(0,r.jsx)(t.h3,{id:"prompt-outputs",children:"Prompt outputs"}),"\n",(0,r.jsxs)(t.p,{children:["Executing inference for a prompt results in an output or array of outputs. These outputs can be optionally serialized to an ",(0,r.jsx)(t.code,{children:"aiconfig"}),"."]}),"\n",(0,r.jsxs)(t.p,{children:["All outputs have an ",(0,r.jsx)(t.code,{children:"output_type"})," field, which is a string defining what type of output it is."]}),"\n",(0,r.jsx)(t.h4,{id:"execute_result",children:(0,r.jsx)(t.code,{children:"execute_result"})}),"\n",(0,r.jsx)(t.p,{children:"This output type is the result of running inference for a prompt."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:'type ExecuteResult = {\n  output_type: "execute_result";\n\n  /**\n   * A result\'s prompt number, if there are multiple outputs (e.g. multiple choices).\n   */\n  execution_count?: number;\n\n  /**\n   * The result of executing the prompt.\n   */\n  data: JSONValue;\n\n  /**\n   * The MIME type of the result. If not specified, the MIME type will be assumed to be plain text.\n   */\n  mime_type?: string;\n\n  /**\n   * Output metadata.\n   */\n  metadata?: {\n    [k: string]: any;\n  };\n};\n'})}),"\n",(0,r.jsx)(t.h4,{id:"error",children:(0,r.jsx)(t.code,{children:"error"})}),"\n",(0,r.jsx)(t.p,{children:"This output type can be used to store errors encountered during inference."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:'type Error = {\n  /**\n   * Type of output.\n   */\n  output_type: "error";\n\n  /**\n   * The name of the error.\n   */\n  ename: string;\n\n  /**\n   * The value, or message, of the error.\n   */\n  evalue: string;\n\n  /**\n   * The error\'s traceback, represented as an array of strings.\n   */\n  traceback: string[];\n};\n'})}),"\n",(0,r.jsx)(t.h4,{id:"example-prompt-output",children:"Example prompt output"}),"\n",(0,r.jsx)(t.p,{children:"This is the result of executing a GPT-4 text completion."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:'{\n    "output_type": "execute_result",\n    "execution_count": 0,\n    "data": {\n        "role": "assistant",\n        "content": "Idina Menzel was born in Brooklyn, New York on May 30, 1971."\n    },\n    "metadata": {\n        "id": "chatcmpl-8I6nJzTo36E4PW60gGPuivJc0nEJB",\n        "object": "chat.completion",\n        "created": 1699326713,\n        "model": "gpt-4-0613",\n        "usage": {\n            "prompt_tokens": 83,\n            "completion_tokens": 19,\n            "total_tokens": 102\n        },\n        "finish_reason": "stop"\n    }\n}\n'})}),"\n",(0,r.jsx)(t.h2,{id:"metadata",children:"Metadata"}),"\n",(0,r.jsxs)(t.p,{children:["Metadata is a place for you to put any JSON-serializable information about the ",(0,r.jsx)(t.code,{children:"aiconfig"}),", prompt, or output. Metadata is a namespace, which means:"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"if the same properties are specified in root and prompt metadata, the sub-metadata is preferred (i.e. the root metadata is merged into the prompt metadata)."}),"\n",(0,r.jsxs)(t.li,{children:["common properties can be up-leveled into the root metadata to simplify the ",(0,r.jsx)(t.code,{children:"aiconfig"}),"."]}),"\n",(0,r.jsx)(t.li,{children:"custom metadata should use unique property names, since different extensions can add properties to metadata."}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"root-metadata",children:"Root metadata"}),"\n",(0,r.jsxs)(t.p,{children:["The following metadata keys are defined at the ",(0,r.jsx)(t.code,{children:"aiconfig"})," level. They are all optional:"]}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Key"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"parameters"})}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.code,{children:"dict"})," (keyed by parameter name)"]}),(0,r.jsxs)(t.td,{children:["Parameters key-value pairs that may be used in one or more text prompt inputs with the ",(0,r.jsx)(t.a,{href:"https://handlebarsjs.com",children:"handlebars"})," ",(0,r.jsx)(t.code,{children:"{{parameter_name}}"})," syntax"]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"models"})}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.code,{children:"dict"})," (keyed by model name)"]}),(0,r.jsx)(t.td,{children:"Globally defined model settings. Any prompts that use these models will have these settings applied by default, unless they override them with their own model settings."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"default_model"})}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"string"})}),(0,r.jsx)(t.td,{children:"Name of default model to use for prompts that do not specify a model in their own metadata."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"model_parsers"})}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.code,{children:"dict"})," (keyed by model name, value is ",(0,r.jsx)(t.code,{children:"ModelParser"})," ID)"]}),(0,r.jsx)(t.td,{children:"This is useful if you want to use a custom ModelParser for a model, or if a single ModelParser can handle multiple models."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.em,{children:"extra user-defined properties"})}),(0,r.jsx)(t.td,{children:"JSON-serializable object"}),(0,r.jsx)(t.td,{children:"Additional properties can be specified that may be used for specific use-cases."})]})]})]}),"\n",(0,r.jsx)(t.h3,{id:"prompt-metadata",children:"Prompt metadata"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Key"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"parameters"})}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.code,{children:"dict"})," (keyed by parameter name)"]}),(0,r.jsxs)(t.td,{children:["Parameters key-value pairs that may be used in one or more text prompt inputs with the ",(0,r.jsx)(t.a,{href:"https://handlebarsjs.com",children:"handlebars"})," ",(0,r.jsx)(t.code,{children:"{{parameter_name}}"})," syntax"]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"model"})}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.code,{children:"string"})," (model name) or ",(0,r.jsx)(t.code,{children:"dict"})," (with name and settings of model)"]}),(0,r.jsxs)(t.td,{children:["Model name/settings that apply to this prompt. If this is undefined, the ",(0,r.jsx)(t.code,{children:"default_model"})," specified in the root metadata will be used."]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"tags"})}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"list[string]"})}),(0,r.jsx)(t.td,{children:"A list of string tags on the prompt."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.em,{children:"extra user-defined properties"})}),(0,r.jsx)(t.td,{children:"JSON-serializable object"}),(0,r.jsx)(t.td,{children:"Additional properties can be specified that may be used for specific use-cases."})]})]})]}),"\n",(0,r.jsx)(t.h3,{id:"output-metadata",children:"Output metadata"}),"\n",(0,r.jsx)(t.p,{children:"Output metadata contains information like completion reason, usage tokens, etc."}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Key"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsx)(t.tbody,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.em,{children:"extra user-defined properties"})}),(0,r.jsx)(t.td,{children:"JSON-serializable object"}),(0,r.jsx)(t.td,{children:"Additional properties can be specified that may be used for specific use-cases."})]})})]}),"\n",(0,r.jsxs)(t.p,{children:["See ",(0,r.jsx)(t.a,{href:"#example-prompt-output",children:"this example"})," to see the output structure."]})]})}function h(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},5162:(e,t,n)=>{n.d(t,{Z:()=>a});n(7294);var r=n(6010);const i={tabItem:"tabItem_Ymn6"};var s=n(5893);function a(e){let{children:t,hidden:n,className:a}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,r.Z)(i.tabItem,a),hidden:n,children:t})}},4866:(e,t,n)=>{n.d(t,{Z:()=>w});var r=n(7294),i=n(6010),s=n(2466),a=n(6550),o=n(469),l=n(1980),d=n(7392),c=n(12);function h(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??function(e){return h(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:i}}=e;return{value:t,label:n,attributes:r,default:i}}))}(n);return function(e){const t=(0,d.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function p(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:n}=e;const i=(0,a.k6)(),s=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l._X)(s),(0,r.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(i.location.search);t.set(s,e),i.replace({...i.location,search:t.toString()})}),[s,i])]}function x(e){const{defaultValue:t,queryString:n=!1,groupId:i}=e,s=u(e),[a,l]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:s}))),[d,h]=m({queryString:n,groupId:i}),[x,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[i,s]=(0,c.Nk)(n);return[i,(0,r.useCallback)((e=>{n&&s.set(e)}),[n,s])]}({groupId:i}),j=(()=>{const e=d??x;return p({value:e,tabValues:s})?e:null})();(0,o.Z)((()=>{j&&l(j)}),[j]);return{selectedValue:a,selectValue:(0,r.useCallback)((e=>{if(!p({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);l(e),h(e),f(e)}),[h,f,s]),tabValues:s}}var f=n(2389);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=n(5893);function b(e){let{className:t,block:n,selectedValue:r,selectValue:a,tabValues:o}=e;const l=[],{blockElementScrollPositionUntilNextRender:d}=(0,s.o5)(),c=e=>{const t=e.currentTarget,n=l.indexOf(t),i=o[n].value;i!==r&&(d(t),a(i))},h=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const n=l.indexOf(e.currentTarget)+1;t=l[n]??l[0];break}case"ArrowLeft":{const n=l.indexOf(e.currentTarget)-1;t=l[n]??l[l.length-1];break}}t?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},t),children:o.map((e=>{let{value:t,label:n,attributes:s}=e;return(0,g.jsx)("li",{role:"tab",tabIndex:r===t?0:-1,"aria-selected":r===t,ref:e=>l.push(e),onKeyDown:h,onClick:c,...s,className:(0,i.Z)("tabs__item",j.tabItem,s?.className,{"tabs__item--active":r===t}),children:n??t},t)}))})}function y(e){let{lazy:t,children:n,selectedValue:i}=e;const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=s.find((e=>e.props.value===i));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:s.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==i})))})}function v(e){const t=x(e);return(0,g.jsxs)("div",{className:(0,i.Z)("tabs-container",j.tabList),children:[(0,g.jsx)(b,{...e,...t}),(0,g.jsx)(y,{...e,...t})]})}function w(e){const t=(0,f.Z)();return(0,g.jsx)(v,{...e,children:h(e.children)},String(t))}},1151:(e,t,n)=>{n.d(t,{Z:()=>o,a:()=>a});var r=n(7294);const i={},s=r.createContext(i);function a(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);