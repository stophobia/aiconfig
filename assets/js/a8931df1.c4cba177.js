"use strict";(self.webpackChunkaiconfig_docs=self.webpackChunkaiconfig_docs||[]).push([[405],{711:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>m,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=t(5893),r=t(1151),i=t(4866),o=t(5162),s=t(4883);const l={sidebar_position:3},c="Define a Prompt Chain",d={id:"overview/define-prompt-chain",title:"Define a Prompt Chain",description:"What are prompt chains",source:"@site/docs/overview/define-prompt-chain.md",sourceDirName:"overview",slug:"/overview/define-prompt-chain",permalink:"/docs/overview/define-prompt-chain",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"docSidebar",previous:{title:"Create an AIConfig",permalink:"/docs/overview/create-an-aiconfig"},next:{title:"Passing Data into Prompts",permalink:"/docs/overview/parameters"}},u={},p=[{value:"What are prompt chains",id:"what-are-prompt-chains",level:2},{value:"Prompt chains in AIConfig",id:"prompt-chains-in-aiconfig",level:2},{value:"Conversation History",id:"conversation-history",level:3},{value:"Parameter Chains",id:"parameter-chains",level:3}];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"define-a-prompt-chain",children:"Define a Prompt Chain"}),"\n",(0,a.jsx)(n.h2,{id:"what-are-prompt-chains",children:"What are prompt chains"}),"\n",(0,a.jsx)(n.p,{children:"Prompt chains are ways of connecting several prompt calls together (potentially across multiple models). The simplest prompt chain is conversation history in a chatbot -- previous messages are part of a chain and that context affects the model's response to the latest prompt."}),"\n",(0,a.jsx)(n.p,{children:"You can use prompt chains to orchestrate workflows spanning multiple models. For example, you could generate an image from an audio file using:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Whisper (audio-to-text)"}),"\n",(0,a.jsx)(n.li,{children:"GPT-4 (text-to-text) intermediate"}),"\n",(0,a.jsx)(n.li,{children:"Stable Diffusion (text-to-image)"}),"\n"]}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["See this ",(0,a.jsx)(n.a,{href:"https://lastmileai.dev/workbooks/clkoo1u0w00r9phw1jgymo5fi",children:(0,a.jsx)(n.strong,{children:"AI Workbook"})})," for an example of a prompt chain"]})}),"\n",(0,a.jsx)(n.h2,{id:"prompt-chains-in-aiconfig",children:"Prompt chains in AIConfig"}),"\n",(0,a.jsx)(n.p,{children:"AIConfig supports prompt chains in several ways:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#conversation-history",children:"Conversation history"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#parameter-chains",children:"Parameter chains"})}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"conversation-history",children:"Conversation History"}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsx)(n.p,{children:"By default, prompts from the same chat model are considered to be part of the same chat session and automatically added as conversation history."})}),"\n",(0,a.jsxs)(n.p,{children:["For example, in the following ",(0,a.jsx)(n.code,{children:"aiconfig"}),", ",(0,a.jsx)(n.code,{children:"prompt1"})," and ",(0,a.jsx)(n.code,{children:"prompt2"})," are considered to be part of the same prompt chain:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",metastring:'title="transformers.aiconfig.json"',children:'{\n  "name": "palm-chat-aiconfig",\n  "schema_version": "latest",\n  "metadata": {\n    "models": {\n      "PaLM Chat": {\n        "model": "models/chat-bison-001",\n        "temperature": 0.9\n      }\n    }\n  },\n  "prompts": [\n    {\n      "name": "prompt1",\n      "input": "What are transformers?",\n      "metadata": {\n        "model": "PaLM Chat"\n      }\n    },\n    {\n      "name": "prompt2",\n      "input": "How does this differ from a recurrent neural network?",\n      "metadata": {\n        "model": "PaLM Chat"\n      }\n    }\n  ]\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["In order to treat ",(0,a.jsx)(n.code,{children:"prompt2"})," as an individual prompt, you can set ",(0,a.jsx)(n.code,{children:"remember_chat_context"})," to ",(0,a.jsx)(n.code,{children:"false"})," in the prompt's metadata:"]}),"\n",(0,a.jsxs)(i.Z,{groupId:"aiconfig-language",queryString:!0,defaultValue:s.Z.defaultAIConfigLanguage,values:s.Z.aiConfigLanguages,children:[(0,a.jsx)(o.Z,{value:"python",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",metastring:'title="app.py"',children:'from aiconfig import AIConfigRuntime\n\nconfig = AIConfigRuntime.load(\'transformers.aiconfig.json\')\n\nconfig.set_metadata("remember_chat_context", False, "prompt2")\n\n# Runs just prompt2, without conversation history from prompt1\nawait config.run("prompt2")\n\nconfig.save()\n'})})}),(0,a.jsx)(o.Z,{value:"node",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",metastring:'title="app.ts"',children:'import * as path from "path";\nimport { AIConfigRuntime } from "aiconfig";\n\nasync function noConversationHistory() {\n  const aiConfig = AIConfigRuntime.load(\n    path.join(__dirname, "transformers.aiconfig.json")\n  );\n\n  aiConfig.setMetadata("remember_chat_context", false, "prompt2");\n\n  // Runs just prompt2, without conversation history from prompt1\n  await aiConfig.run("prompt2");\n\n  aiConfig.save();\n}\n'})})})]}),"\n",(0,a.jsx)(n.h3,{id:"parameter-chains",children:"Parameter Chains"}),"\n",(0,a.jsx)(n.p,{children:"Parameter chains are created by passing data between prompts using parameters."}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"aiconfig"})," uses ",(0,a.jsx)(n.a,{href:"https://handlebarsjs.com/",children:(0,a.jsx)(n.code,{children:"{{handlebars}}"})})," templating syntax that allows you to pass data ",(0,a.jsx)(n.em,{children:"into"})," prompts, and ",(0,a.jsx)(n.em,{children:"between"})," prompts."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsxs)(n.strong,{children:["In order to pass data between prompts, use the ",(0,a.jsx)(n.code,{children:"{{<prompt_name>.output}}"})," or ",(0,a.jsx)(n.code,{children:"{{<prompt_name>.input}}"})," syntax"]}),". ",(0,a.jsx)(n.code,{children:".output"})," references the result of running ",(0,a.jsx)(n.code,{children:"prompt_name"}),", while ",(0,a.jsx)(n.code,{children:".input"})," references the prompt itself."]}),"\n",(0,a.jsxs)(n.p,{children:["For example, in the following ",(0,a.jsx)(n.code,{children:"aiconfig"}),", ",(0,a.jsx)(n.code,{children:"gen_itinerary"})," references the output of the ",(0,a.jsx)(n.code,{children:"get_activities"})," prompt:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",metastring:'title="travel.aiconfig.json"',children:'{\n  "name": "NYC Trip Planner",\n  "description": "Intrepid explorer with ChatGPT and AIConfig",\n  "schema_version": "latest",\n  "metadata": {},\n  "prompts": [\n    {\n      "name": "get_activities",\n      "input": "Tell me 10 fun attractions to do in NYC.",\n      "metadata": {\n        "model": "gpt-3.5-turbo"\n      }\n    },\n    {\n      "name": "gen_itinerary",\n      "input": "Generate an itinerary ordered by geographic location for these activities: {{get_activities.output}}.",\n      "metadata": {\n        "model": "gpt-4"\n      }\n    }\n  ]\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"Observe the following:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["The ",(0,a.jsx)(n.code,{children:"gen_itinerary"})," prompt depends on the output of the ",(0,a.jsx)(n.code,{children:"get_activities"})," prompt."]}),"\n",(0,a.jsxs)(n.li,{children:["It uses ",(0,a.jsx)(n.strong,{children:"gpt-4"}),", whereas the ",(0,a.jsx)(n.code,{children:"get_activities"})," prompt it depends on uses ",(0,a.jsx)(n.strong,{children:"gpt-3.5-turbo"}),"."]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["Effectively, this is a prompt chain between ",(0,a.jsx)(n.code,{children:"gen_itinerary"})," and ",(0,a.jsx)(n.code,{children:"get_activities"})," prompts, ",(0,a.jsx)(n.em,{children:"as well as"})," as a model chain between ",(0,a.jsx)(n.strong,{children:"gpt-3.5-turbo"})," and ",(0,a.jsx)(n.strong,{children:"gpt-4"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"To run this with AIConfig:"}),"\n",(0,a.jsxs)(i.Z,{groupId:"aiconfig-language",queryString:!0,defaultValue:s.Z.defaultAIConfigLanguage,values:s.Z.aiConfigLanguages,children:[(0,a.jsx)(o.Z,{value:"python",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"from aiconfig import AIConfigRuntime\n\nconfig = AIConfigRuntime.load('travel.aiconfig.json')\n\n# This will first run get_activities with GPT-3.5,\n# and then use its output to run the gen_itinerary using GPT-4\nawait config.run(\n    \"gen_itinerary\",\n    options=InferenceOptions(stream=True),\n    run_with_dependencies=True)\n"})})}),(0,a.jsx)(o.Z,{value:"node",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'import * as path from "path";\nimport { AIConfigRuntime } from "aiconfig";\n\nasync function runPromptChain() {\n  const aiConfig = AIConfigRuntime.load(\n    path.join(__dirname, "travel.aiconfig.json")\n  );\n\n  // This will first run get_activities with GPT-3.5,\n  // and then use its output to run the gen_itinerary using GPT-4\n  await aiConfig.runWithDependencies("gen_itinerary");\n}\n'})})})]}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsx)(n.p,{children:"Notice how simple the syntax is to perform a fairly complex task - running 2 different prompts across 2 different models and chaining one's output as part of the input of another."})}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:["You can create fairly complex control flow using parameter chains. ",(0,a.jsx)(n.code,{children:"aiconfig"})," ensures there are no cycles in the control flow by ",(0,a.jsx)(n.strong,{children:"forcing parameter references only to previous prompts"}),". This ensures that parameter chains are always a directed acyclic graph (DAG) of dependencies."]})}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Advanced"}),": It is possible to use a different templating syntax than handlebars. You will need to implement a new kind of ",(0,a.jsx)(n.a,{href:"https://github.com/lastmile-ai/aiconfig/blob/main/python/src/aiconfig/default_parsers/parameterized_model_parser.py",children:(0,a.jsx)(n.code,{children:"ParameterizedModelParser"})}),"."]})})]})}function m(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},4883:(e,n,t)=>{t.d(n,{Z:()=>o});var a=t(412);const r=!!a.Z.canUseDOM&&navigator.platform.startsWith("Mac"),i=!!a.Z.canUseDOM&&navigator.platform.startsWith("Win"),o={defaultOs:r?"macos":i?"windows":"linux",defaultNodePackageManager:"npm",defaultPythonPackageManager:"pip",defaultPlatform:r?"ios":"android",defaultSyntax:"functional",defaultAIConfigLanguage:"python",getDevNotesTabs:function(e){return void 0===e&&(e=["android","ios","web","windows"]),[e.includes("android")?{label:"Android",value:"android"}:void 0,e.includes("ios")?{label:"iOS",value:"ios"}:void 0,e.includes("web")?{label:"Web",value:"web"}:void 0,e.includes("windows")?{label:"Windows",value:"windows"}:void 0].filter(Boolean)},oses:[{label:"macOS",value:"macos"},{label:"Windows",value:"windows"},{label:"Linux",value:"linux"}],nodePackageManagers:[{label:"npm",value:"npm"},{label:"Yarn",value:"yarn"}],pythonPackageManagers:[{label:"pip",value:"pip"},{label:"poetry",value:"poetry"}],platforms:[{label:"Android",value:"android"},{label:"iOS",value:"ios"}],aiConfigLanguages:[{label:"Python",value:"python"},{label:"TypeScript",value:"node"}]}},5162:(e,n,t)=>{t.d(n,{Z:()=>o});t(7294);var a=t(6010);const r={tabItem:"tabItem_Ymn6"};var i=t(5893);function o(e){let{children:n,hidden:t,className:o}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,a.Z)(r.tabItem,o),hidden:t,children:n})}},4866:(e,n,t)=>{t.d(n,{Z:()=>w});var a=t(7294),r=t(6010),i=t(2466),o=t(6550),s=t(469),l=t(1980),c=t(7392),d=t(12);function u(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:n,children:t}=e;return(0,a.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:r}}=e;return{value:n,label:t,attributes:a,default:r}}))}(t);return function(e){const n=(0,c.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function h(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const r=(0,o.k6)(),i=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l._X)(i),(0,a.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(r.location.search);n.set(i,e),r.replace({...r.location,search:n.toString()})}),[i,r])]}function f(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,i=p(e),[o,l]=(0,a.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!h({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:i}))),[c,u]=m({queryString:t,groupId:r}),[f,g]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,i]=(0,d.Nk)(t);return[r,(0,a.useCallback)((e=>{t&&i.set(e)}),[t,i])]}({groupId:r}),x=(()=>{const e=c??f;return h({value:e,tabValues:i})?e:null})();(0,s.Z)((()=>{x&&l(x)}),[x]);return{selectedValue:o,selectValue:(0,a.useCallback)((e=>{if(!h({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),g(e)}),[u,g,i]),tabValues:i}}var g=t(2389);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var v=t(5893);function j(e){let{className:n,block:t,selectedValue:a,selectValue:o,tabValues:s}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,i.o5)(),d=e=>{const n=e.currentTarget,t=l.indexOf(n),r=s[t].value;r!==a&&(c(n),o(r))},u=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,v.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":t},n),children:s.map((e=>{let{value:n,label:t,attributes:i}=e;return(0,v.jsx)("li",{role:"tab",tabIndex:a===n?0:-1,"aria-selected":a===n,ref:e=>l.push(e),onKeyDown:u,onClick:d,...i,className:(0,r.Z)("tabs__item",x.tabItem,i?.className,{"tabs__item--active":a===n}),children:t??n},n)}))})}function b(e){let{lazy:n,children:t,selectedValue:r}=e;const i=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=i.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return(0,v.jsx)("div",{className:"margin-top--md",children:i.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==r})))})}function y(e){const n=f(e);return(0,v.jsxs)("div",{className:(0,r.Z)("tabs-container",x.tabList),children:[(0,v.jsx)(j,{...e,...n}),(0,v.jsx)(b,{...e,...n})]})}function w(e){const n=(0,g.Z)();return(0,v.jsx)(y,{...e,children:u(e.children)},String(n))}},1151:(e,n,t)=>{t.d(n,{Z:()=>s,a:()=>o});var a=t(7294);const r={},i=a.createContext(r);function o(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);